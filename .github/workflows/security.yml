name: Security Checks

on:
  schedule:
    # 毎日午前3時（JST 12時）に実行
    - cron: '0 18 * * *'
  workflow_dispatch:

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        npm audit --json > audit-report.json || true
        cat audit-report.json
    
    - name: Check for critical vulnerabilities
      run: |
        node -e "
        const report = require('./audit-report.json');
        const critical = report.metadata.vulnerabilities.critical || 0;
        const high = report.metadata.vulnerabilities.high || 0;
        
        if (critical > 0) {
          console.error(\`❌ Found \${critical} critical vulnerabilities\`);
          process.exit(1);
        }
        
        if (high > 0) {
          console.warn(\`⚠️ Found \${high} high severity vulnerabilities\`);
        }
        
        console.log('✅ No critical vulnerabilities found');
        "
    
    - name: Upload audit report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: npm-audit-report
        path: audit-report.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install license checker
      run: npm install -g license-checker
    
    - name: Check licenses
      run: |
        license-checker --json > licenses.json
        license-checker --summary
    
    - name: Verify license compliance
      run: |
        node -e "
        const licenses = require('./licenses.json');
        const prohibited = ['GPL', 'AGPL', 'LGPL'];
        const issues = [];
        
        for (const [pkg, info] of Object.entries(licenses)) {
          if (prohibited.some(lic => info.licenses && info.licenses.includes(lic))) {
            issues.push(\`\${pkg}: \${info.licenses}\`);
          }
        }
        
        if (issues.length > 0) {
          console.error('❌ Found prohibited licenses:');
          issues.forEach(issue => console.error(\`  - \${issue}\`));
          process.exit(1);
        }
        
        console.log('✅ All licenses are compliant');
        "
    
    - name: Upload license report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/nodejs
          p/javascript
    
    - name: Run NodeJsScan
      run: |
        docker run -v "$PWD:/src" opensecurity/nodejsscan:latest \
          -o /src/nodejsscan-report.json /src
    
    - name: Upload SAST reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: sast-reports
        path: |
          nodejsscan-report.json
          semgrep-results.sarif

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false # 有効化する場合はDockerfileが必要
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build container image
      run: docker build -t smart-review:latest .
    
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'smart-review:latest'
        format: 'sarif'
        output: 'trivy-container.sarif'
    
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-container.sarif'

  report:
    name: Security Report
    needs: [dependency-check, license-check, sast, secret-scanning]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create security summary
      run: |
        echo "# Security Check Summary" > security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Results" >> security-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
        echo "- SAST: ${{ needs.sast.result }}" >> security-summary.md
        echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-summary.md
        
        cat security-summary.md
    
    - name: Upload summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Create issue if failed
      if: contains(needs.*.result, 'failure')
      uses: actions/github-script@v6
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Check Failed - ${date}`,
            body: 'Automated security checks have failed. Please review the workflow logs.',
            labels: ['security', 'automated']
          });